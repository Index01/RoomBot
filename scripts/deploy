#!/usr/bin/env bash

set -e

SCRIPTDIR=$( cd "${0%/*}" && pwd)
ROOTDIR="${SCRIPTDIR%/*}"

warn() {
    2>&1 echo "Warning: $*"
}

problems() {
    2>&1 echo "Error: $*"
    exit 1
}

cleanup() {
    if [ -e "$ENV_FILE" ] ; then
	rm "$ENV_FILE"
    fi
}

usage() {
    echo "deploy <username> <hostname> <env>"
    echo "             -f force through confirmations"
    echo
    echo "this script will deploy the most recently built (local) artifact to the remote host"
    echo "it will perform migrations, restart services, and not make you a martini. this script"
    echo "is meant to run only from a clean git checkout on the 'main' branch."
    exit 1
}


trap cleanup EXIT

[ $# -ge 3 ] || usage

R_USER="$1"
R_HOST="$2"
R_ENV="$3"
shift 3

FORCE=""
while getopts "f" arg; do
    case $arg in
	f)
	    FORCE="yes"
	    ;;
	*)
	    usage
	    ;;
    esac
done

ENV_FILE="${ROOTDIR}/secrets/${R_ENV}.env"
ENC_FILE="${ROOTDIR}/config/${R_ENV}.enc"
[ -e "$ENV_FILE" ] && problems "plaintext secrets present"
[ -e "$ENC_FILE" ] || problems "unknown env ${R_ENV} specified"

DIRTY=""
if [ "$( (git status --porcelain || true) | wc -l)" != "0" ] ; then
    warn "Dirty git repo detected"
    DIRTY="yes"
fi
if [ "$(git rev-parse --abbrev-ref HEAD)" != "main" ] ; then
    warn "Branch other than 'main' detected"
    DIRTY="yes"
fi
if [ -n "$DIRTY" ] ; then
    if [ -n "$FORCE" ] ; then
	warn "Deploying anyway, despite recommendations on local workspace"
    else
	echo "Deployment should only be done from a git workspace that is clean and on the 'main' branch."
	echo "Are you sure you wish to continue? [y/n]"
	read -r -s -n 1 answer
	if [ "$answer" != "y" ] ; then
	    problems "user said no"
	fi
    fi
fi

scp "${SCRIPTDIR}/deploy-remote.sh" \
    "${R_USER}@${R_HOST}:/tmp/deploy.sh"
scp "${ROOTDIR}/build/roombaht-backend.tgz" \
    "${ROOTDIR}/build/roombaht-frontend.tgz" \
    "${R_USER}@${R_HOST}:/tmp" || problems "Unable to copy archives"
"${SCRIPTDIR}/secrets" decrypt "$R_ENV"
scp "$ENV_FILE" "${R_USER}@${R_HOST}:/tmp/secrets.env"

ssh "${R_USER}@${R_HOST}" \
    "sudo bash /tmp/deploy.sh ; sudo rm /tmp/deploy.sh"

#!/usr/bin/env bash

set -e

SCRIPTDIR=$( cd "${0%/*}" && pwd)
ROOTDIR="${SCRIPTDIR%/*}"

problems() {
    2>&1 echo "Error: $*"
    exit 1
}

cleanup() {
    if [ -e "$ENV_FILE" ] ; then
	rm "$ENV_FILE"
	if [ -n "$SSH_HOST" ] && [ -n "$R_SECRET" ] ; then
	    ssh -o 'ControlMaster no' "$SSH_HOST" "sudo rm -f /tmp/${R_SECRET}"
	fi
    fi

}

usage() {
    echo "roombaht_ctl <user> <env> init <ballys dot csv> <nugget dot csv> <staff dot csv>"
    echo "roombaht_ctl <user> <env> frontend-log"
    echo "roombaht_ctl <user> <env> backend-log"
    echo "roombaht_ctl <user> <env> backend-restart"
    echo "roombaht_ctl <user> <env> snapshot"
    echo "roombaht_ctl <user> <env> wipe"
    echo "roombaht_ctl <user> <env> clone_db"
    echo "roombaht_ctl <user> <env> deploy"
    echo "roombaht_ctl <user> <env> quick_deploy"
    echo "roombaht_ctl <user> <env> quick_deploy"
    echo "roombaht_ctl <user> <env> rooms"
    echo "roombaht_ctl <user> <env> manage"
}

yeet_command() {
    local COMMAND="$1"
    ssh -t -o 'ControlMaster no' "${SSH_HOST}" "$COMMAND"
}

yeet_file() {
    local SRC="$1"
    local DEST="$2"
    if [ ! -e "$SRC" ] ; then
	problems "Unable to find source file ${SRC}"
    fi
    scp -q "$SRC" "${SSH_HOST}:/tmp/${DEST}"
}

yeet_script() {
    yeet_file "$ENV_FILE" "$R_SECRET"
    yeet_file "${SCRIPTDIR}/roombaht_ctl-remote.sh" "$R_SCRIPT"
}

yeet_ctl() {
    local CTL="$1"
    yeet_command "sudo bash -c 'export ENV_FILE=/tmp/${R_SECRET} ; bash /tmp/${R_SCRIPT} ${CTL}'; sudo rm -f /tmp/${R_SCRIPT} /tmp/${R_SECRET}"
}

trap cleanup EXIT

[ $# -lt 3 ] && ( usage ; exit 1 )

R_USER="$1"
R_ENV="$2"
ACTION="$3"
shift 3

ENV_FILE="${ROOTDIR}/secrets/${R_ENV}.env"
ENC_FILE="${ROOTDIR}/config/${R_ENV}.enc"

[ -e "$ENV_FILE" ] && problems "plaintext secrets present"
[ -e "$ENC_FILE" ] || problems "env file not found"

# always extract ssh host
"${SCRIPTDIR}/secrets" decrypt "$R_ENV"
# shellcheck disable=1090
source "$ENV_FILE"
[ -n "$ROOMBAHT_HOST" ] || problems "unable to determine deployment host"
# allow override for early in dev cycle before dns setup
if [ -z "$SSH_HOST" ] ; then
    SSH_HOST="${R_USER}@${ROOMBAHT_HOST}"
else
    SSH_HOST="${R_USER}@${SSH_HOST}"
fi

# keep it random, allows for multiple invocations
R_SCRIPT="roombaht_ctl-remote-${RANDOM}.sh"
R_SECRET="secrets-${RANDOM}.env"


if [ "$ACTION" == "init" ] ; then
    BALLYS_SRC="$1"
    HARDROCK_SRC="$2"
    STAFF_SRC="$3"
    shift 3
    if [ ! -e "$BALLYS_FILE" ] ; then
	problems "room file ${BALLYS_FILE} not found"
    fi
    if [ ! -e "$HARDROCK_FILE" ] ; then
	problems "room file ${HARDROCK_FILE} not found"
    fi
    if [ ! -e "$STAFF_FILE" ] ; then
	problems "staff file ${STAFF_FILE} not found"
    fi
    BALLYS_DEST="/tmp/$(basename "$BALLYS_SRC")"
    STAFF_DEST="/tmp/$(basename "$STAFF_SRC")"
    HARDROCK_DEST="/tmp/$(basename "$HARDROCK_SRC")"
    yeet_file "$BALLYS_SRC" "$BALLYS_DEST"
    yeet_file "$HARDROCK_SRC" "$HARDROCK_DEST"
    yeet_file "$STAFF_SRC" "$STAFF_DEST"
    yeet_ctl "init  ${BALLYS_DEST} ${HARDROCK_DEST} ${STAFF_DEST}"
elif [ "$ACTION" == "backend-log" ] ; then
    yeet_command "sudo journalctl -f -u roombaht -u cron.service -t roombaht-oob -t uwsgi -n 100"
elif [ "$ACTION" == "frontend-log" ] ; then
    yeet_command "sudo tail -n 50 -f /var/log/nginx/access.log /var/log/nginx/error.log"
elif [ "$ACTION" == "backend-restart" ] ; then
    yeet_command "sudo systemctl restart roombaht"
elif [ "$ACTION" == "snapshot" ] ; then
    yeet_script
    yeet_ctl "${ACTION} snapshot"
elif [ "$ACTION" == "wipe" ] || [ "$ACTION" == "clone_db" ] ; then
    echo "This will completely wipe the database and it will be super annoying to get it back."
    echo "Are you sure? [y/n]"
    read -r -s -n 1 answer
    if [ "$answer" != "y" ] ; then
	problems "user said no"
    fi
    if [ "$ACTION" == "clone_db" ] && [ "$R_ENV" == "prod" ] ; then
	problems "cannot clone prod -> prod"
    fi
    yeet_script
    yeet_ctl "${ACTION} $*"
elif [ "$ACTION" == "deploy" ] || [ "$ACTION" == "quick_deploy" ] ; then
    BACKEND_SRC="${ROOTDIR}/build/roombaht-backend.tgz"
    FRONTEND_SRC="${ROOTDIR}/build/roombaht-frontend.tgz"
    if [ ! -e "$BACKEND_SRC" ] ; then
	problems "Unable to find backend artifact locally"
    fi
    if [ ! -e "$FRONTEND_SRC" ] ; then
	problems "Unable to find frontend artifact locally"
    fi
    yeet_script
    yeet_file "$BACKEND_SRC" "$BACKEND_ARTIFACT"
    yeet_file "$FRONTEND_SRC" "$FRONTEND_ARTIFACT"
    yeet_ctl "$ACTION"
elif [ "$ACTION" == "rooms" ] ; then
    if [ "$#" -lt 2 ] ; then
	usage
	exit 1
    fi
    HOTEL="$1"
    ROOM_LIST="$2"
    shift 2
    if [ "$HOTEL" != "ballys" ] && [ "$HOTEL" != "hardrock" ] ; then
	problems "invalid hotel specified"
    fi
    ROOM_DEST="$(basename "$ROOM_LIST")"
    ROOM_DEST="${ROOM_DEST// /_}"
    yeet_file "$ROOM_LIST" "$ROOM_DEST"
    yeet_script
    yeet_ctl "manage create_rooms /tmp/${ROOM_DEST} --hotel ${HOTEL} $*"
elif [ "$ACTION" == "manage" ] ; then
    yeet_script
    yeet_ctl "manage $*"
elif [ "$ACTION" == "help" ] ; then
    usage
else
    usage
    exit 1
fi
